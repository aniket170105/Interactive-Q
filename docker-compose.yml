services:
  # MySQL Database
  mysql-db:
    image: mysql:8.0
    container_name: interactive-q-mysql
    environment:
      MYSQL_ROOT_PASSWORD: Aniket
      MYSQL_DATABASE: test_temp
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./DataBase/Queries.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - interactive-q-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 100

  # Java Spring Boot Backend
  java-backend:
    build:
      context: ./Backend/main
      dockerfile: Dockerfile
    container_name: interactive-q-java-backend
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/test_temp?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Aniket
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    depends_on:
      mysql-db:
        condition: service_healthy
    networks:
      - interactive-q-network
    restart: unless-stopped

  # Node.js Socket.io Backend
  nodejs-backend:
    build:
      context: ./Backend/NodeJsBackend
      dockerfile: Dockerfile
    container_name: interactive-q-nodejs-backend
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
    networks:
      - interactive-q-network
    restart: unless-stopped

  # Frontend (Vite build served by Node 'serve', no Nginx)
  frontend:
    build:
      context: ./Frontend/frontend
      dockerfile: Dockerfile
    container_name: interactive-q-frontend
    ports:
      - "5173:5173"
    depends_on:
      - java-backend
      - nodejs-backend
    networks:
      - interactive-q-network
    restart: unless-stopped

volumes:
  mysql_data:

networks:
  interactive-q-network:
    driver: bridge
